"use strict";

const test = require('tap').test;
const indexes = require('../lib/collection/indexes');

test("UniqueIndex", suite => {
  const { UniqueIndex } = indexes;

  suite.test('should be a subclass of Map', t => {
    t.type(UniqueIndex, 'function');
    t.type(UniqueIndex.prototype, Map);
    t.end();
  });

  suite.test('should not be clearable', t => {
    var index = new UniqueIndex();
    t.strictEqual(index.set(1, 'a'), index);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.get(1), 'a');
    t.strictEqual(index.size, 1);
    t.strictEqual(index.has(2), false);
    t.strictEqual(index.set(2, 'a'), index);
    t.strictEqual(index.has(2), true);
    t.strictEqual(index.size, 2);
    t.strictEqual(index.set(2, 'b'), index);
    t.throws(() => index.clear(), new Error("unimplemented: can't clear unique index"));
    t.strictEqual(index.size, 2);
    t.strictEqual(index.delete(2), true);
    t.strictEqual(index.size, 1);
    t.strictEqual(index.delete(2), false);
    t.strictEqual(index.size, 1);
    t.throws(() => index.clear(), new Error("unimplemented: can't clear unique index"));
    t.strictEqual(index.size, 1);
    t.end();
  });

  suite.test('should be Iterable', t => {
    var index = new UniqueIndex();
    t.strictEqual(index.set(1, 'a'), index);
    t.strictEqual(index.set(2, 'b'), index);
    t.strictEqual(index.set(3, 'c'), index);
    t.strictSame(index.all(), ['a', 'b', 'c']);
    t.strictSame(index.toArray(), ['a', 'b', 'c']);
    t.strictSame(index.grep(/a|c/).toArray(), ['a', 'c']);
    t.strictSame(index.count(), 3);
    t.end();
  });

  suite.end();
});


test("MultiValueIndex", suite => {
  const { MultiValueIndex } = indexes;

  suite.test('should be a subclass of Map', t => {
    t.type(MultiValueIndex, 'function');
    t.type(MultiValueIndex.prototype, Map);
    t.end();
  });

  suite.test('should be have MultiValueSet and emptySet', t => {
    t.type(MultiValueIndex.MultiValueSet, 'function');
    t.type(MultiValueIndex.prototype, Map);
    t.type(MultiValueIndex.emptySet, MultiValueIndex.MultiValueSet);
    t.strictEqual(MultiValueIndex.emptySet.size, 0);
    t.end();
  });

  suite.test('should values not be settable deletable or clearable', t => {
    var index = new MultiValueIndex();
    t.throws(() => index.get(1).add('a'), new Error("this is a read only set"));
    t.throws(() => index.get(1).clear(), new Error("this is a read only set"));
    t.throws(() => index.get(1).delete(1), new Error("this is a read only set"));
    t.strictEqual(index.add(1, 'a'), index);
    t.throws(() => index.get(1).add('b'), new Error("this is a read only set"));
    t.throws(() => index.get(1).clear(), new Error("this is a read only set"));
    t.throws(() => index.get(1).delete(1), new Error("this is a read only set"));
    t.strictEqual(index.size, 1);
    t.strictSame(index.toArray(), ['a']);
    t.strictEqual(index.delete(1, 'a'), true);
    t.strictEqual(index.size, 0);
    t.strictSame(index.toArray(), []);
    t.end();
  });

  suite.test('should not be settable or clearable', t => {
    var index = new MultiValueIndex();
    t.throws(() => index.set(1, 'a'), new Error("forbidden: this is a multi-value index"));
    t.throws(() => index.clear(), new Error("unimplemented: can't clear multi-value index"));
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has(2), false);
    t.strictEqual(index.size, 0);
    t.type(index.get(1), MultiValueIndex.MultiValueSet);
    t.strictEqual(index.get(1), MultiValueIndex.emptySet);
    t.strictEqual(index.add(1, 'a'), index);
    t.strictEqual(index.add(1, 'b'), index);
    t.strictEqual(index.add(1, 'c'), index);
    t.strictSame(index.get(1).toArray(), ['a','b','c']);
    t.type(index.get(1), MultiValueIndex.MultiValueSet);
    t.strictEqual(index.size, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.add(2, 'a'), index);
    t.strictEqual(index.size, 2);
    t.strictEqual(index.has(2), true);
    t.strictSame(index.get(2).toArray(), ['a']);
    t.type(index.get(2), MultiValueIndex.MultiValueSet);
    t.strictEqual(index.delete(2, 'b'), false);
    t.strictEqual(index.delete(2, 'a'), true);
    t.strictEqual(index.delete(2, 'a'), false);
    t.strictEqual(index.has(2), false);
    t.strictEqual(index.size, 1);
    t.strictEqual(index.delete(1, 'a'), true);
    t.strictSame(index.get(1).toArray(), ['b','c']);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.size, 1);
    t.strictEqual(index.delete(1, 'b'), true);
    t.strictSame(index.get(1).toArray(), ['c']);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.size, 1);
    t.strictEqual(index.delete(1, 'c'), true);
    t.strictEqual(index.get(1), MultiValueIndex.emptySet);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.size, 0);
    t.end();
  });

  suite.test('should be Iterable', t => {
    var index = new MultiValueIndex();
    t.strictEqual(index.add(1, 'a'), index);
    t.strictEqual(index.add(1, 'b'), index);
    t.strictEqual(index.add(2, 'c'), index);
    t.strictSame(index.all(), ['a', 'b', 'c']);
    t.strictSame(index.toArray(), ['a', 'b', 'c']);
    t.strictSame(index.grep(/a|c/).toArray(), ['a', 'c']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.get(1).all(), ['a', 'b']);
    t.strictSame(index.get(1).toArray(), ['a', 'b']);
    t.strictSame(index.get(1).grep(/a|c/).toArray(), ['a']);
    t.strictSame(index.get(1).count(), 2);
    t.strictSame(index.get(2).count(), 1);
    t.end();
  });

  suite.end();
});


test("CompositeUniqueIndex", suite => {
  const { CompositeUniqueIndex } = indexes;

  suite.test('should be a subclass of Map', t => {
    t.type(CompositeUniqueIndex, 'function');
    t.type(CompositeUniqueIndex.prototype, Map);
    t.end();
  });

  suite.test('should not be clearable and throw error on bad set/delete args', t => {
    var index = new CompositeUniqueIndex(1);
    t.strictEqual(index.componentCount, 1);
    t.throws(() => index.clear(), new Error("unimplemented: can't clear composite unique index"));
    t.throws(() => index.set(1, 2), new TypeError("CompositeUniqueIndex: 'keys` argument must be an Array"));
    t.throws(() => index.delete(1, 2), new TypeError("CompositeUniqueIndex: 'keys` argument must be an Array"));
    t.end();
  });

  suite.test('should values not be settable deletable or clearable', t => {
    var index = new CompositeUniqueIndex(2);
    t.throws(() => index.get(1).set([2], 'b'), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).clear(), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).delete(1), new Error("this is a read only composite index"));
    t.strictEqual(index.set([1, 1], 'a'), 2);
    t.throws(() => index.get(1).set([2], 'b'), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).clear(), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).delete(1), new Error("this is a read only composite index"));
    t.strictEqual(index.size, 1);
    t.strictSame(index.toArray(), ['a']);
    t.strictEqual(index.delete([1, 1], 'a'), true);
    t.strictEqual(index.size, 0);
    t.strictSame(index.toArray(), []);
    t.end();
  });

  suite.test('should be a composite unique index', t => {
    var index = new CompositeUniqueIndex(3);
    t.strictEqual(index.componentCount, 3);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has(1, 2, 3), false);
    t.strictEqual(index.has([1, 2, 3]), false);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeUniqueIndex);
    t.type(index.get(1, 2), CompositeUniqueIndex);
    t.type(index.get(1, 4), CompositeUniqueIndex);
    t.strictEqual(index.get(1, 2, 3), undefined);
    t.strictEqual(index.set([1, 2, 3], 'a'), 3);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has(1, 2, 3), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has([1, 2]), true);
    t.strictEqual(index.has([1, 2, 3]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.type(index.get(1, 2), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['a']);
    t.strictSame(index.get(1).toArray(), ['a']);
    t.strictSame(index.get(1, 2).toArray(), ['a']);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get(1, 2, 3), 'a');
    t.strictEqual(index.get([1, 2, 3]), 'a');
    t.strictEqual(index.set([1, 2, 3], 'b'), 3);
    t.strictEqual(index.set([1, 4, 5], 'c'), 3);
    t.strictEqual(index.set([1, 2, 4], 'd'), 3);

    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 3);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), true);
    t.strictEqual(index.has(1, 2, 3), true);
    t.strictEqual(index.has(1, 2, 4), true);
    t.strictEqual(index.has(1, 2, 5), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), true);
    t.strictEqual(index.has([1, 2, 3]), true);
    t.strictEqual(index.has([1, 4, 5]), true);
    t.strictSame(index.toArray(), ['b', 'd', 'c']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.grep(/d|c/).toArray(), ['d', 'c']);
    t.type(index.get(1), CompositeUniqueIndex);
    t.type(index.get(1, 2), CompositeUniqueIndex);
    t.type(index.get(1, 4), CompositeUniqueIndex);
    t.strictSame(index.get(1).toArray(), ['b', 'd', 'c']);
    t.strictSame(index.get(1).count(), 3);
    t.strictSame(index.get(1).grep(/d|c/).toArray(), ['d', 'c']);
    t.strictSame(index.get(1, 2).toArray(), ['b', 'd']);
    t.strictSame(index.get(1, 2).grep(/d|c/).toArray(), ['d']);
    t.strictSame(index.get(2).count(), 0);
    t.strictSame(index.get(1, 2).count(), 2);
    t.strictSame(index.get(1, 4).toArray(), ['c']);
    t.strictSame(index.get(1, 4).count(), 1);
    t.strictEqual(index.get(1, 2).size, 2);
    t.strictEqual(index.get(1, 4).size, 1);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, 4]), index.get(1, 4));
    t.strictEqual(index.get(1, 4, 5), 'c');
    t.strictEqual(index.get(1, 4, 3), undefined);
    t.strictEqual(index.get(1, 2, 5), undefined);
    t.strictEqual(index.delete([1, 2, 3]), true);
    t.strictEqual(index.delete([1, 2, 3]), false);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 2);
    t.throws(() => index.clear(), new Error("unimplemented: can't clear composite unique index"));
    t.strictEqual(index.get(1, 2).size, 1);
    t.strictEqual(index.get(1, 4).size, 1);
    t.strictEqual(index.delete([1, 2, 4]), true);
    t.strictEqual(index.delete([1, 2, 4]), false);
    t.strictEqual(index.get(1, 2).size, 0);
    t.strictEqual(index.get(1, 4).size, 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), true);
    t.strictEqual(index.has(1, 2, 3), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), true);
    t.strictEqual(index.has([1, 2, 3]), false);
    t.strictEqual(index.has([1, 4, 5]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.type(index.get(1, 2), CompositeUniqueIndex);
    t.type(index.get(1, 4), CompositeUniqueIndex);
    t.strictSame(index.get(1).toArray(), ['c']);
    t.strictSame(index.get(1, 4).toArray(), ['c']);
    t.strictSame(index.get(1, 2).toArray(), []);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, 4]), index.get(1, 4));
    t.strictEqual(index.get(1, 4, 5), 'c');
    t.strictEqual(index.get(1, 4, 3), undefined);
    t.strictEqual(index.get(1, 2, 3), undefined);
    t.strictEqual(index.get(1, 2, 5), undefined);
    t.strictEqual(index.delete([1, 4, 5]), true);
    t.strictEqual(index.delete([1, 4, 5]), false);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), false);
    t.strictEqual(index.has(1, 2, 3), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), false);
    t.strictEqual(index.has([1, 2, 3]), false);
    t.strictEqual(index.has([1, 4, 5]), false);
    t.end();
  });

  suite.test('should treat undefined in a special way', t => {
    var index = new CompositeUniqueIndex(1);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.strictEqual(index.set([undefined], 'x'), 0);
    t.strictEqual(index.size, 0);
    t.type(index.get(undefined), undefined);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.delete([undefined], 'x'), false);

    var index = new CompositeUniqueIndex(2);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.strictEqual(index.set([undefined, 1], 'x'), 0);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.has(undefined, 1), false);
    t.strictEqual(index.size, 0);
    t.type(index.get(undefined), CompositeUniqueIndex);
    t.strictEqual(index.get(undefined).size, 0);
    t.strictEqual(index.delete([undefined, 1], 'x'), false);

    t.strictEqual(index.set([1, undefined], 'x'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['x']);
    t.strictSame(index.get(1).toArray(), ['x']);
    t.strictSame(index.count(), 1);
    t.strictSame(index.get(1).count(), 1);
    t.strictSame(index.get(1).size, 0);
    t.strictSame(index.get([1]).toArray(), ['x']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);

    t.strictEqual(index.set([1, undefined], 'y'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['x', 'y']);
    t.strictSame(index.get(1).toArray(), ['x', 'y']);
    t.strictSame(index.count(), 2);
    t.strictSame(index.get(1).count(), 2);
    t.strictSame(index.get(1).size, 0);
    t.strictSame(index.get([1]).toArray(), ['x', 'y']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);

    t.strictEqual(index.set([1, 1], 'z'), 2);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['x', 'y', 'z']);
    t.strictSame(index.get(1).toArray(), ['x', 'y', 'z']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.get(1).count(), 3);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['x', 'y', 'z']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.get(1, 1), 'z');
    t.strictEqual(index.get([1, 1]), 'z');

    t.strictEqual(index.delete([1, undefined], 'x'), true);
    t.strictEqual(index.delete([1, undefined], 'x'), false);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['y', 'z']);
    t.strictSame(index.get(1).toArray(), ['y', 'z']);
    t.strictSame(index.count(), 2);
    t.strictSame(index.get(1).count(), 2);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['y', 'z']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.get(1, 1), 'z');
    t.strictEqual(index.get([1, 1]), 'z');

    t.strictEqual(index.delete([1, undefined], 'y'), true);
    t.strictEqual(index.delete([1, undefined], 'y'), false);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['z']);
    t.strictSame(index.get(1).toArray(), ['z']);
    t.strictSame(index.count(), 1);
    t.strictSame(index.get(1).count(), 1);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['z']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.get(1, 1), 'z');
    t.strictEqual(index.get([1, 1]), 'z');

    t.strictEqual(index.delete([1, 1], 'z'), true);
    t.strictEqual(index.delete([1, 1], 'z'), false);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.get(1).toArray(), []);
    t.strictSame(index.get([1]).toArray(), []);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.get(1, 1), undefined);
    t.strictEqual(index.get([1, 1]), undefined);

    t.strictEqual(index.set([1, 1], 'z'), 2);
    t.strictEqual(index.set([1, undefined], 'y'), 1);
    t.strictEqual(index.set([1, undefined], 'x'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['y', 'x', 'z']);
    t.strictSame(index.get(1).toArray(), ['y', 'x', 'z']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.get(1).count(), 3);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['y', 'x', 'z']);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.get(1, 1), 'z');
    t.strictEqual(index.get([1, 1]), 'z');

    t.strictEqual(index.delete([1, undefined], 'x'), true);
    t.strictEqual(index.delete([1, 1], 'z'), true);
    t.strictEqual(index.delete([1, undefined], 'y'), true);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeUniqueIndex);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.get(1).toArray(), []);
    t.strictSame(index.get([1]).toArray(), []);
    t.strictEqual(index.get(1, undefined), undefined);
    t.strictEqual(index.get([1, undefined]), undefined);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.get(1, 1), undefined);
    t.strictEqual(index.get([1, 1]), undefined);
    t.strictEqual(index.delete([1, undefined], 'x'), false);
    t.strictEqual(index.delete([1, 1], 'z'), false);
    t.strictEqual(index.delete([1, undefined], 'y'), false);

    var index = new CompositeUniqueIndex(3);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.set([undefined, 1, 2], 'x'), 0);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.has(undefined, 1), false);
    t.strictEqual(index.has(undefined, 1, 2), false);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.type(index.get(undefined), CompositeUniqueIndex);
    t.strictEqual(index.get(undefined).size, 0);
    t.strictEqual(index.get(undefined).count(), 0);
    t.strictEqual(index.delete([undefined, 1], 'x'), false);

    t.strictEqual(index.set([1, undefined, 1], 'a'), 1);
    t.strictEqual(index.set([1, undefined, undefined], 'b'), 1);
    t.strictEqual(index.set([1, 1, 1], 'x'), 3);
    t.strictEqual(index.set([1, 1, undefined], 'c'), 2);
    t.strictEqual(index.set([1, 2, undefined], 'd'), 2);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, undefined, undefined), false);
    t.strictEqual(index.has([1, undefined, undefined]), false);
    t.strictEqual(index.has(1, undefined, 1), false);
    t.strictEqual(index.has([1, undefined, 1]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.strictEqual(index.has(1, 1, 1), true);
    t.strictEqual(index.has([1, 1, 1]), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has([1, 2]), true);
    t.strictEqual(index.has(1, 1, undefined), false);
    t.strictEqual(index.has([1, 1, undefined]), false);
    t.strictEqual(index.has(1, 2, undefined), false);
    t.strictEqual(index.has([1, 2, undefined]), false);
    t.type(index.get(undefined), CompositeUniqueIndex);
    t.type(index.get(undefined, 1), CompositeUniqueIndex);
    t.type(index.get(1), CompositeUniqueIndex);
    t.type(index.get(1, 1), CompositeUniqueIndex);
    t.type(index.get(1, 2), CompositeUniqueIndex);
    t.type(index.get(1, undefined), CompositeUniqueIndex);
    t.strictSame(index.toArray(), ['a', 'b', 'c', 'x', 'd']);
    t.strictSame(index.count(), 5);
    t.strictSame(index.get(1).toArray(), ['a', 'b', 'c', 'x', 'd']);
    t.strictSame(index.get(1).size, 2);
    t.strictSame(index.get(1).count(), 5);
    t.strictSame(index.get(1, 1).toArray(), ['c', 'x']);
    t.strictSame(index.get(1, 1).size, 1);
    t.strictSame(index.get(1, 1).count(), 2);
    t.strictSame(index.get(1, 2).toArray(), ['d']);
    t.strictSame(index.get(1, 2).size, 0);
    t.strictSame(index.get(1, 2).count(), 1);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, undefined, 1]), undefined);
    t.strictEqual(index.get([1, undefined, undefined]), undefined);
    t.strictEqual(index.get([1, 1, 1]), 'x');
    t.strictEqual(index.get([1, 1, undefined]), undefined);
    t.strictEqual(index.get([1, 2, undefined]), undefined);

    t.strictEqual(index.delete([1, undefined, undefined], 'a'), true);
    t.strictEqual(index.delete([1, undefined, 100], 'b'), true);
    t.strictEqual(index.delete([1, 1, 1], 'x'), true);
    t.strictEqual(index.delete([1, 1, undefined], 'c'), true);
    t.strictEqual(index.delete([1, 2, undefined], 'd'), true);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.count(), 0);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, undefined, undefined), false);
    t.strictEqual(index.has([1, undefined, undefined]), false);
    t.strictEqual(index.has(1, undefined, 1), false);
    t.strictEqual(index.has([1, undefined, 1]), false);
    t.strictEqual(index.has(1, 1), false);
    t.strictEqual(index.has([1, 1]), false);
    t.strictEqual(index.has(1, 1, 1), false);
    t.strictEqual(index.has([1, 1, 1]), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has([1, 2]), false);
    t.strictEqual(index.has(1, 1, undefined), false);
    t.strictEqual(index.has([1, 1, undefined]), false);
    t.strictEqual(index.has(1, 2, undefined), false);
    t.strictEqual(index.has([1, 2, undefined]), false);

    t.end();
  });

  suite.end();
});

test("CompositeMultiValueIndex", suite => {
  const { CompositeMultiValueIndex } = indexes;
  const { MultiValueSet } = CompositeMultiValueIndex;

  suite.test('should be a subclass of Map', t => {
    t.type(CompositeMultiValueIndex, 'function');
    t.type(CompositeMultiValueIndex.prototype, Map);
    t.end();
  });

  suite.test('should not be clearable, settable and throw error on bad add/delete args', t => {
    var index = new CompositeMultiValueIndex(1);
    t.strictEqual(index.componentCount, 1);
    t.throws(() => index.set(), new Error("forbidden: this is a composite multi-value index"));
    t.throws(() => index.clear(), new Error("unimplemented: can't clear composite multi-value index"));
    t.throws(() => index.add(1, 2), new TypeError("CompositeMultiValueIndex: 'keys` argument must be an Array"));
    t.throws(() => index.delete(1, 2), new TypeError("CompositeMultiValueIndex: 'keys` argument must be an Array"));
    t.end();
  });

  suite.test('should values not be settable deletable or clearable', t => {
    var index = new CompositeMultiValueIndex(2);
    t.throws(() => index.get(1, 1).add('a'), new Error("this is a read only set"));
    t.throws(() => index.get(1, 1).clear(), new Error("this is a read only set"));
    t.throws(() => index.get(1, 1).delete(1), new Error("this is a read only set"));
    t.strictEqual(index.add([1, 1], 'a'), 2);
    t.throws(() => index.get(1, 1).add('b'), new Error("this is a read only set"));
    t.throws(() => index.get(1, 1).clear(), new Error("this is a read only set"));
    t.throws(() => index.get(1, 1).delete(1), new Error("this is a read only set"));
    t.throws(() => index.get(1).add([1], 'b'), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).set([1], 'b'), new Error("forbidden: this is a composite multi-value index"));
    t.throws(() => index.get(1).clear(), new Error("this is a read only composite index"));
    t.throws(() => index.get(1).delete([1]), new Error("this is a read only composite index"));
    t.strictEqual(index.size, 1);
    t.strictSame(index.toArray(), ['a']);
    t.strictEqual(index.delete([1, 1], 'a'), true);
    t.strictEqual(index.size, 0);
    t.strictSame(index.toArray(), []);
    t.end();
  });

  suite.test('should be a composite unique index', t => {
    var index = new CompositeMultiValueIndex(3);
    t.strictEqual(index.componentCount, 3);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has(1, 2, 3), false);
    t.strictEqual(index.has([1, 2, 3]), false);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.type(index.get(1, 2), CompositeMultiValueIndex);
    t.type(index.get(1, 4), CompositeMultiValueIndex);
    t.type(index.get(1, 2, 3), MultiValueSet);
    t.strictEqual(index.get(1, 2, 3).count(), 0);
    t.strictEqual(index.add([1, 2, 3], 'a'), 3);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has(1, 2, 3), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has([1, 2]), true);
    t.strictEqual(index.has([1, 2, 3]), true);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.type(index.get(1, 2), CompositeMultiValueIndex);
    t.type(index.get(1, 2, 3), MultiValueSet);
    t.strictSame(index.toArray(), ['a']);
    t.strictSame(index.get(1).toArray(), ['a']);
    t.strictSame(index.get(1, 2).toArray(), ['a']);
    t.strictSame(index.get(1, 2, 3).toArray(), ['a']);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, 2, 3]), index.get(1, 2, 3));

    t.strictEqual(index.add([1, 2, 3], 'b'), 3);
    t.strictEqual(index.add([1, 4, 5], 'c'), 3);
    t.strictEqual(index.add([1, 2, 4], 'd'), 3);
3
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 4);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), true);
    t.strictEqual(index.has(1, 2, 3), true);
    t.strictEqual(index.has(1, 2, 4), true);
    t.strictEqual(index.has(1, 2, 5), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), true);
    t.strictEqual(index.has([1, 2, 3]), true);
    t.strictEqual(index.has([1, 4, 5]), true);
    t.strictSame(index.toArray(), ['a', 'b', 'd', 'c']);
    t.strictSame(index.count(), 4);
    t.strictSame(index.grep(/d|c/).toArray(), ['d', 'c']);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.type(index.get(1, 2), CompositeMultiValueIndex);
    t.type(index.get(1, 4), CompositeMultiValueIndex);
    t.type(index.get(1, 2, 3), MultiValueSet);
    t.type(index.get(1, 2, 4), MultiValueSet);
    t.type(index.get(1, 4, 5), MultiValueSet);
    t.strictSame(index.get(1).toArray(), ['a', 'b', 'd', 'c']);
    t.strictSame(index.get(1).count(), 4);
    t.strictSame(index.get(1).grep(/d|c/).toArray(), ['d', 'c']);
    t.strictSame(index.get(1, 2).toArray(), ['a', 'b', 'd']);
    t.strictSame(index.get(1, 2).grep(/d|c/).toArray(), ['d']);
    t.strictSame(index.get(2).count(), 0);
    t.strictSame(index.get(1, 2).count(), 3);
    t.strictSame(index.get(1, 4).toArray(), ['c']);
    t.strictSame(index.get(1, 4).count(), 1);
    t.strictEqual(index.get(1, 2).size, 2);
    t.strictEqual(index.get(1, 4).size, 1);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, 2, 3]), index.get(1, 2, 3));
    t.strictEqual(index.get([1, 2, 4]), index.get(1, 2, 4));
    t.strictEqual(index.get([1, 4, 5]), index.get(1, 4, 5));
    t.strictSame(index.get(1, 2, 3).toArray(), ['a', 'b']);
    t.strictSame(index.get(1, 2, 4).toArray(), ['d']);
    t.strictSame(index.get(1, 4, 5).toArray(), ['c']);
    t.strictEqual(index.get(1, 4, 3).count(), 0);
    t.strictEqual(index.get(1, 2, 5).count(), 0);
    t.strictEqual(index.delete([1, 2, 3], 'a'), true);
    t.strictEqual(index.delete([1, 2, 3], 'a'), false);

    t.strictEqual(index.size, 1);
    t.throws(() => index.clear(), new Error("unimplemented: can't clear composite multi-value index"));
    // t.strictEqual(index.length, 4);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), true);
    t.strictEqual(index.has(1, 2, 3), true);
    t.strictEqual(index.has(1, 2, 4), true);
    t.strictEqual(index.has(1, 2, 5), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), true);
    t.strictEqual(index.has([1, 2, 3]), true);
    t.strictEqual(index.has([1, 4, 5]), true);
    t.strictSame(index.toArray(), ['b', 'd', 'c']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.grep(/d|c/).toArray(), ['d', 'c']);
    t.strictSame(index.get(1, 2).count(), 2);
    t.strictEqual(index.get(1, 2).size, 2);
    t.strictEqual(index.get(1, 4).size, 1);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, 2, 3]), index.get(1, 2, 3));
    t.strictEqual(index.get([1, 2, 4]), index.get(1, 2, 4));
    t.strictEqual(index.get([1, 4, 5]), index.get(1, 4, 5));
    t.strictSame(index.get(1, 2, 3).toArray(), ['b']);
    t.strictSame(index.get(1, 2, 4).toArray(), ['d']);
    t.strictSame(index.get(1, 4, 5).toArray(), ['c']);

    t.strictEqual(index.delete([1, 2, 3], 'b'), true);
    t.strictEqual(index.delete([1, 2, 3], 'b'), false);
    t.strictEqual(index.delete([1, 4, 5], 'c'), true);
    t.strictEqual(index.delete([1, 4, 5], 'c'), false);
    t.strictEqual(index.delete([1, 2, 4], 'd'), true);
    t.strictEqual(index.delete([1, 2, 4], 'd'), false);

    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.count(), 0);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has(1, 3), false);
    t.strictEqual(index.has(1, 4), false);
    t.strictEqual(index.has(1, 2, 3), false);
    t.strictEqual(index.has(1, 3, 3), false);
    t.strictEqual(index.has(1, 4, 3), false);
    t.strictEqual(index.has(1, 4, 5), false);
    t.strictEqual(index.has([1, 2, 3]), false);
    t.strictEqual(index.has([1, 2, 4]), false);
    t.strictEqual(index.has([1, 4, 5]), false);
    t.strictEqual(index.get(1).count(), 0);
    t.strictEqual(index.get(1, 2).count(), 0);
    t.strictEqual(index.get(1, 2, 3).count(), 0);
    t.strictEqual(index.get(1, 2, 4).count(), 0);
    t.strictEqual(index.get(1, 4).count(), 0);
    t.strictEqual(index.get(1, 4, 5).count(), 0);

    t.end();
  });

  suite.test('should treat undefined in a special way', t => {
    var index = new CompositeMultiValueIndex(1);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.strictEqual(index.add([undefined], 'x'), 0);
    t.strictEqual(index.size, 0);
    t.type(index.get(undefined), MultiValueSet);
    t.strictEqual(index.get(undefined).count(), 0);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.delete([undefined], 'x'), false);

    var index = new CompositeMultiValueIndex(2);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.strictEqual(index.add([undefined, 1], 'x'), 0);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.has(undefined, 1), false);
    t.strictEqual(index.size, 0);
    t.type(index.get(undefined), CompositeMultiValueIndex);
    t.strictEqual(index.get(undefined).size, 0);
    t.strictEqual(index.get(undefined).count(), 0);
    t.strictEqual(index.delete([undefined, 1], 'x'), false);

    t.strictEqual(index.add([1, undefined], 'x'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['x']);
    t.strictSame(index.get(1).toArray(), ['x']);
    t.strictSame(index.count(), 1);
    t.strictSame(index.get(1).count(), 1);
    t.strictSame(index.get(1).size, 0);
    t.strictSame(index.get([1]).toArray(), ['x']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);

    t.strictEqual(index.add([1, undefined], 'y'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['x', 'y']);
    t.strictSame(index.get(1).toArray(), ['x', 'y']);
    t.strictSame(index.count(), 2);
    t.strictSame(index.get(1).count(), 2);
    t.strictSame(index.get(1).size, 0);
    t.strictSame(index.get([1]).toArray(), ['x', 'y']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);

    t.strictEqual(index.add([1, 1], 'z'), 2);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['x', 'y', 'z']);
    t.strictSame(index.get(1).toArray(), ['x', 'y', 'z']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.get(1).count(), 3);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['x', 'y', 'z']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.get(1, 1).count(), 1);
    t.strictEqual(index.get(1, 1).first(), 'z');
    t.strictEqual(index.get([1, 1]).count(), 1);
    t.strictEqual(index.get([1, 1]).first(), 'z');

    t.strictEqual(index.delete([1, undefined], 'x'), true);
    t.strictEqual(index.delete([1, undefined], 'x'), false);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['y', 'z']);
    t.strictSame(index.get(1).toArray(), ['y', 'z']);
    t.strictSame(index.count(), 2);
    t.strictSame(index.get(1).count(), 2);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['y', 'z']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.get(1, 1).count(), 1);
    t.strictEqual(index.get(1, 1).first(), 'z');
    t.strictEqual(index.get([1, 1]).count(), 1);
    t.strictEqual(index.get([1, 1]).first(), 'z');

    t.strictEqual(index.delete([1, undefined], 'y'), true);
    t.strictEqual(index.delete([1, undefined], 'y'), false);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['z']);
    t.strictSame(index.get(1).toArray(), ['z']);
    t.strictSame(index.count(), 1);
    t.strictSame(index.get(1).count(), 1);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['z']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.get(1, 1).count(), 1);
    t.strictEqual(index.get(1, 1).first(), 'z');
    t.strictEqual(index.get([1, 1]).count(), 1);
    t.strictEqual(index.get([1, 1]).first(), 'z');

    t.strictEqual(index.delete([1, 1], 'z'), true);
    t.strictEqual(index.delete([1, 1], 'z'), false);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.get(1).toArray(), []);
    t.strictSame(index.get([1]).toArray(), []);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.get(1, 1).count(), 0);
    t.strictEqual(index.get([1, 1]).count(), 0);

    t.strictEqual(index.add([1, 1], 'z'), 2);
    t.strictEqual(index.add([1, undefined], 'y'), 1);
    t.strictEqual(index.add([1, undefined], 'x'), 1);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['y', 'x', 'z']);
    t.strictSame(index.get(1).toArray(), ['y', 'x', 'z']);
    t.strictSame(index.count(), 3);
    t.strictSame(index.get(1).count(), 3);
    t.strictSame(index.get(1).size, 1);
    t.strictSame(index.get([1]).toArray(), ['y', 'x', 'z']);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.get(1, 1).count(), 1);
    t.strictEqual(index.get(1, 1).first(), 'z');
    t.strictEqual(index.get([1, 1]).count(), 1);
    t.strictEqual(index.get([1, 1]).first(), 'z');

    t.strictEqual(index.delete([1, undefined], 'x'), true);
    t.strictEqual(index.delete([1, 1], 'z'), true);
    t.strictEqual(index.delete([1, undefined], 'y'), true);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.get(1).toArray(), []);
    t.strictSame(index.get([1]).toArray(), []);
    t.strictEqual(index.get(1, undefined).count(), 0);
    t.strictEqual(index.get([1, undefined]).count(), 0);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.get(1, 1).count(), 0);
    t.strictEqual(index.get([1, 1]).count(), 0);
    t.strictEqual(index.delete([1, undefined], 'x'), false);
    t.strictEqual(index.delete([1, 1], 'z'), false);
    t.strictEqual(index.delete([1, undefined], 'y'), false);

    var index = new CompositeMultiValueIndex(3);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.add([undefined, 1, 2], 'x'), 0);
    t.strictEqual(index.has(undefined), false);
    t.strictEqual(index.has(undefined, 1), false);
    t.strictEqual(index.has(undefined, 1, 2), false);
    t.strictEqual(index.size, 0);
    t.strictEqual(index.count(), 0);
    t.type(index.get(undefined), CompositeMultiValueIndex);
    t.strictEqual(index.get(undefined).size, 0);
    t.strictEqual(index.delete([undefined, 1], 'x'), false);

    t.strictEqual(index.add([1, undefined, 1], 'a'), 1);
    t.strictEqual(index.add([1, undefined, undefined], 'b'), 1);
    t.strictEqual(index.add([1, 1, 1], 'x'), 3);
    t.strictEqual(index.add([1, 1, undefined], 'c'), 2);
    t.strictEqual(index.add([1, 2, undefined], 'd'), 2);
    t.strictEqual(index.size, 1);
    // t.strictEqual(index.length, 1);
    t.strictEqual(index.has(1), true);
    t.strictEqual(index.has([1]), true);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, undefined, undefined), false);
    t.strictEqual(index.has([1, undefined, undefined]), false);
    t.strictEqual(index.has(1, undefined, 1), false);
    t.strictEqual(index.has([1, undefined, 1]), false);
    t.strictEqual(index.has(1, 1), true);
    t.strictEqual(index.has([1, 1]), true);
    t.strictEqual(index.has(1, 1, 1), true);
    t.strictEqual(index.has([1, 1, 1]), true);
    t.strictEqual(index.has(1, 2), true);
    t.strictEqual(index.has([1, 2]), true);
    t.strictEqual(index.has(1, 1, undefined), false);
    t.strictEqual(index.has([1, 1, undefined]), false);
    t.strictEqual(index.has(1, 2, undefined), false);
    t.strictEqual(index.has([1, 2, undefined]), false);
    t.type(index.get(undefined), CompositeMultiValueIndex);
    t.type(index.get(undefined, 1), CompositeMultiValueIndex);
    t.type(index.get(1), CompositeMultiValueIndex);
    t.type(index.get(1, 1), CompositeMultiValueIndex);
    t.type(index.get(1, 2), CompositeMultiValueIndex);
    t.type(index.get(1, undefined), CompositeMultiValueIndex);
    t.strictSame(index.toArray(), ['a', 'b', 'c', 'x', 'd']);
    t.strictSame(index.count(), 5);
    t.strictSame(index.get(1).toArray(), ['a', 'b', 'c', 'x', 'd']);
    t.strictSame(index.get(1).size, 2);
    t.strictSame(index.get(1).count(), 5);
    t.strictSame(index.get(1, 1).toArray(), ['c', 'x']);
    t.strictSame(index.get(1, 1).size, 1);
    t.strictSame(index.get(1, 1).count(), 2);
    t.strictSame(index.get(1, 2).toArray(), ['d']);
    t.strictSame(index.get(1, 2).size, 0);
    t.strictSame(index.get(1, 2).count(), 1);
    t.strictEqual(index.get([1]), index.get(1));
    t.strictEqual(index.get([1, 2]), index.get(1, 2));
    t.strictEqual(index.get([1, undefined, 1]).count(), 0);
    t.strictEqual(index.get([1, undefined, undefined]).count(), 0);
    t.strictEqual(index.get([1, 1, 1]).count(), 1);
    t.strictEqual(index.get([1, 1, 1]).first(), 'x');
    t.strictEqual(index.get([1, 1, undefined]).count(), 0);
    t.strictEqual(index.get([1, 2, undefined]).count(), 0);

    t.strictEqual(index.delete([1, undefined, undefined], 'a'), true);
    t.strictEqual(index.delete([1, undefined, 100], 'b'), true);
    t.strictEqual(index.delete([1, 1, 1], 'x'), true);
    t.strictEqual(index.delete([1, 1, undefined], 'c'), true);
    t.strictEqual(index.delete([1, 2, undefined], 'd'), true);
    t.strictEqual(index.size, 0);
    // t.strictEqual(index.length, 0);
    t.strictSame(index.toArray(), []);
    t.strictSame(index.count(), 0);
    t.strictEqual(index.has(1), false);
    t.strictEqual(index.has([1]), false);
    t.strictEqual(index.has(1, undefined), false);
    t.strictEqual(index.has([1, undefined]), false);
    t.strictEqual(index.has(1, undefined, undefined), false);
    t.strictEqual(index.has([1, undefined, undefined]), false);
    t.strictEqual(index.has(1, undefined, 1), false);
    t.strictEqual(index.has([1, undefined, 1]), false);
    t.strictEqual(index.has(1, 1), false);
    t.strictEqual(index.has([1, 1]), false);
    t.strictEqual(index.has(1, 1, 1), false);
    t.strictEqual(index.has([1, 1, 1]), false);
    t.strictEqual(index.has(1, 2), false);
    t.strictEqual(index.has([1, 2]), false);
    t.strictEqual(index.has(1, 1, undefined), false);
    t.strictEqual(index.has([1, 1, undefined]), false);
    t.strictEqual(index.has(1, 2, undefined), false);
    t.strictEqual(index.has([1, 2, undefined]), false);

    t.end();
  });

  suite.end();
});
