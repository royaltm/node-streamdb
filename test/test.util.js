var test = require("tap").test;
var util = require("../lib/util");

function Dummy() {}

test("isArray", function(t) {
  t.strictEqual(util.isArray([]),                                   true);
  t.strictEqual(util.isArray(Array()),                              true);
  t.strictEqual(util.isArray(new Array()),                          true);
  t.strictEqual(util.isArray(new Array(5)),                         true);
  t.strictEqual(util.isArray(new Array('foo', 'bar', 'baz')),       true);
  t.strictEqual(util.isArray({}),                                   false);
  t.strictEqual(util.isArray({ push: function() {} }),              false);
  t.strictEqual(util.isArray(/regexp/),                             false);
  t.strictEqual(util.isArray(new Error),                            false);
  t.strictEqual(util.isArray(Object.create(Array.prototype)),       false);
  t.strictEqual(util.isArray(function(){}),                         false);
  t.strictEqual(util.isArray(Symbol("foo")),                        false);
  t.strictEqual(util.isArray(new Int16Array(0)),                    false);
  t.strictEqual(util.isArray(new Uint16Array(0)),                   false);
  t.strictEqual(util.isArray(new Int32Array(0)),                    false);
  t.strictEqual(util.isArray(new Uint32Array(0)),                   false);
  t.strictEqual(util.isArray(new Float32Array(0)),                  false);
  t.strictEqual(util.isArray(new Float64Array(0)),                  false);
  t.end();
});

test("isBoolean", function(t) {
  t.strictEqual(util.isBoolean(true),                           true);
  t.strictEqual(util.isBoolean(false),                          true);
  t.strictEqual(util.isBoolean(new Boolean(true)),              false);
  t.strictEqual(util.isBoolean(new Boolean(false)),             false);
  t.strictEqual(util.isBoolean({}),                             false);
  t.strictEqual(util.isBoolean({ name: 'Error', message: '' }), false);
  t.strictEqual(util.isBoolean([]),                             false);
  t.strictEqual(util.isBoolean(Object.create(null)),            false);
  t.strictEqual(util.isBoolean(),                               false);
  t.strictEqual(util.isBoolean(null),                           false);
  t.strictEqual(util.isBoolean(undefined),                      false);
  t.strictEqual(util.isBoolean(0),                              false);
  t.strictEqual(util.isBoolean(42),                             false);
  t.strictEqual(util.isBoolean(''),                             false);
  t.strictEqual(util.isBoolean('foo'),                          false);
  t.strictEqual(util.isBoolean(function(){}),                   false);
  t.strictEqual(util.isBoolean(Symbol("foo")),                  false);
  t.end();
});

test("isBuffer", function(t) {
  t.strictEqual(util.isBuffer({}),                              false);
  t.strictEqual(util.isBuffer([]),                              false);
  t.strictEqual(util.isBuffer(new Date),                        false);
  t.strictEqual(util.isBuffer(/regexp/),                        false);
  t.strictEqual(util.isBuffer(new String('asd')),               false);
  t.strictEqual(util.isBuffer(new Number(42)),                  false);
  t.strictEqual(util.isBuffer(new Boolean(false)),              false);
  t.strictEqual(util.isBuffer(new Dummy()),                     false);
  t.strictEqual(util.isBuffer(Object.create(null)),             false);
  t.strictEqual(util.isBuffer(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isBuffer(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isBuffer(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isBuffer(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isBuffer(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isBuffer(),                                false);
  t.strictEqual(util.isBuffer(null),                            false);
  t.strictEqual(util.isBuffer(undefined),                       false);
  t.strictEqual(util.isBuffer(void(0)),                         false);
  t.strictEqual(util.isBuffer(false),                           false);
  t.strictEqual(util.isBuffer(true),                            false);
  t.strictEqual(util.isBuffer(0),                               false);
  t.strictEqual(util.isBuffer(42),                              false);
  t.strictEqual(util.isBuffer(''),                              false);
  t.strictEqual(util.isBuffer('foo'),                           false);
  t.strictEqual(util.isBuffer(function(){}),                    false);
  t.strictEqual(util.isBuffer(Symbol("foo")),                   false);
  t.strictEqual(util.isBuffer(new Buffer(0)),                   true);
  t.strictEqual(util.isBuffer(new Int16Array(0)),               false);
  t.strictEqual(util.isBuffer(new Uint16Array(0)),              false);
  t.strictEqual(util.isBuffer(new Int32Array(0)),               false);
  t.strictEqual(util.isBuffer(new Uint32Array(0)),              false);
  t.strictEqual(util.isBuffer(new Float32Array(0)),             false);
  t.strictEqual(util.isBuffer(new Float64Array(0)),             false);
  t.end();
});

test("isDate", function(t) {
  t.strictEqual(util.isDate(new Date()),                    true);
  t.strictEqual(util.isDate(new Date(0)),                   true);
  t.strictEqual(util.isDate(Date()),                        false);
  t.strictEqual(util.isDate({}),                            false);
  t.strictEqual(util.isDate([]),                            false);
  t.strictEqual(util.isDate(new Error),                     false);
  t.strictEqual(util.isDate(Object.create(Date.prototype)), false);
  t.strictEqual(util.isDate(function(){}),                  false);
  t.strictEqual(util.isDate(Symbol("foo")),                 false);
  t.end();
});

test("isError", function(t) {
  t.strictEqual(util.isError(new Error),                      true);
  t.strictEqual(util.isError(new TypeError),                  true);
  t.strictEqual(util.isError(new SyntaxError),                true);
  t.strictEqual(util.isError({}),                             false);
  t.strictEqual(util.isError({ name: 'Error', message: '' }), false);
  t.strictEqual(util.isError([]),                             false);
  t.strictEqual(util.isError(Object.create(Error.prototype)), true);
  t.strictEqual(util.isError(function(){}),                   false);
  t.strictEqual(util.isError(Symbol("foo")),                  false);
  t.end();
});

test("isNull", function(t) {
  t.strictEqual(util.isNull({}),                              false);
  t.strictEqual(util.isNull([]),                              false);
  t.strictEqual(util.isNull(new Date),                        false);
  t.strictEqual(util.isNull(/regexp/),                        false);
  t.strictEqual(util.isNull(new String('asd')),               false);
  t.strictEqual(util.isNull(new Number(42)),                  false);
  t.strictEqual(util.isNull(new Boolean(false)),              false);
  t.strictEqual(util.isNull(new Dummy()),                     false);
  t.strictEqual(util.isNull(Object.create(null)),             false);
  t.strictEqual(util.isNull(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isNull(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNull(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isNull(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNull(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isNull(),                                false);
  t.strictEqual(util.isNull(null),                            true);
  t.strictEqual(util.isNull(undefined),                       false);
  t.strictEqual(util.isNull(false),                           false);
  t.strictEqual(util.isNull(true),                            false);
  t.strictEqual(util.isNull(0),                               false);
  t.strictEqual(util.isNull(42),                              false);
  t.strictEqual(util.isNull(''),                              false);
  t.strictEqual(util.isNull('foo'),                           false);
  t.strictEqual(util.isNull(function(){}),                    false);
  t.strictEqual(util.isNull(Symbol("foo")),                   false);
  t.end();
});

test("isNullOrUndefined", function(t) {
  t.strictEqual(util.isNullOrUndefined({}),                              false);
  t.strictEqual(util.isNullOrUndefined([]),                              false);
  t.strictEqual(util.isNullOrUndefined(new Date),                        false);
  t.strictEqual(util.isNullOrUndefined(/regexp/),                        false);
  t.strictEqual(util.isNullOrUndefined(new String('asd')),               false);
  t.strictEqual(util.isNullOrUndefined(new Number(42)),                  false);
  t.strictEqual(util.isNullOrUndefined(new Boolean(false)),              false);
  t.strictEqual(util.isNullOrUndefined(new Dummy()),                     false);
  t.strictEqual(util.isNullOrUndefined(Object.create(null)),             false);
  t.strictEqual(util.isNullOrUndefined(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isNullOrUndefined(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNullOrUndefined(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isNullOrUndefined(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNullOrUndefined(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isNullOrUndefined(),                                true);
  t.strictEqual(util.isNullOrUndefined(null),                            true);
  t.strictEqual(util.isNullOrUndefined(undefined),                       true);
  t.strictEqual(util.isNullOrUndefined(void(0)),                         true);
  t.strictEqual(util.isNullOrUndefined(false),                           false);
  t.strictEqual(util.isNullOrUndefined(true),                            false);
  t.strictEqual(util.isNullOrUndefined(0),                               false);
  t.strictEqual(util.isNullOrUndefined(42),                              false);
  t.strictEqual(util.isNullOrUndefined(''),                              false);
  t.strictEqual(util.isNullOrUndefined('foo'),                           false);
  t.strictEqual(util.isNullOrUndefined(function(){}),                    false);
  t.strictEqual(util.isNullOrUndefined(Symbol("foo")),                   false);
  t.end();
});

test("isNumber", function(t) {
  t.strictEqual(util.isNumber({}),                              false);
  t.strictEqual(util.isNumber([]),                              false);
  t.strictEqual(util.isNumber(new Date),                        false);
  t.strictEqual(util.isNumber(/regexp/),                        false);
  t.strictEqual(util.isNumber(new String('asd')),               false);
  t.strictEqual(util.isNumber(new Number(42)),                  false);
  t.strictEqual(util.isNumber(new Boolean(false)),              false);
  t.strictEqual(util.isNumber(new Dummy()),                     false);
  t.strictEqual(util.isNumber(Object.create(null)),             false);
  t.strictEqual(util.isNumber(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isNumber(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNumber(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isNumber(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isNumber(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isNumber(),                                false);
  t.strictEqual(util.isNumber(null),                            false);
  t.strictEqual(util.isNumber(undefined),                       false);
  t.strictEqual(util.isNumber(false),                           false);
  t.strictEqual(util.isNumber(true),                            false);
  t.strictEqual(util.isNumber(0),                               true);
  t.strictEqual(util.isNumber(42),                              true);
  t.strictEqual(util.isNumber(''),                              false);
  t.strictEqual(util.isNumber('foo'),                           false);
  t.strictEqual(util.isNumber(function(){}),                    false);
  t.strictEqual(util.isNumber(Symbol("foo")),                   false);
  t.end();
});

test("isMap", function(t) {
  t.strictEqual(util.isMap({}),                              false);
  t.strictEqual(util.isMap([]),                              false);
  t.strictEqual(util.isMap(new Date),                        false);
  t.strictEqual(util.isMap(/regexp/),                        false);
  t.strictEqual(util.isMap(new String('asd')),               false);
  t.strictEqual(util.isMap(new Number(42)),                  false);
  t.strictEqual(util.isMap(new Boolean(false)),              false);
  t.strictEqual(util.isMap(new Dummy()),                     false);
  t.strictEqual(util.isMap(new Map()),                       true);
  t.strictEqual(util.isMap(new Set()),                       false);
  t.strictEqual(util.isMap(Object.create(null)),             false);
  t.strictEqual(util.isMap(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isMap(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isMap(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isMap(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isMap(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isMap(),                                false);
  t.strictEqual(util.isMap(null),                            false);
  t.strictEqual(util.isMap(undefined),                       false);
  t.strictEqual(util.isMap(false),                           false);
  t.strictEqual(util.isMap(true),                            false);
  t.strictEqual(util.isMap(0),                               false);
  t.strictEqual(util.isMap(42),                              false);
  t.strictEqual(util.isMap(''),                              false);
  t.strictEqual(util.isMap('foo'),                           false);
  t.strictEqual(util.isMap(function(){}),                    false);
  t.strictEqual(util.isMap(Symbol("foo")),                   false);
  t.end();
});

test("isObject", function(t) {
  t.strictEqual(util.isObject({}),                              true);
  t.strictEqual(util.isObject([]),                              true);
  t.strictEqual(util.isObject(new Date),                        true);
  t.strictEqual(util.isObject(/regexp/),                        true);
  t.strictEqual(util.isObject(new String('asd')),               true);
  t.strictEqual(util.isObject(new Number(42)),                  true);
  t.strictEqual(util.isObject(new Boolean(true)),               true);
  t.strictEqual(util.isObject(new Map()),                       true);
  t.strictEqual(util.isObject(new Set()),                       true);
  t.strictEqual(util.isObject(new Dummy()),                     true);
  t.strictEqual(util.isObject(Object.create(null)),             true);
  t.strictEqual(util.isObject(Object.create(Array.prototype)),  true);
  t.strictEqual(util.isObject(Object.create(RegExp.prototype)), true);
  t.strictEqual(util.isObject(Object.create(Date.prototype)),   true);
  t.strictEqual(util.isObject(Object.create(RegExp.prototype)), true);
  t.strictEqual(util.isObject(Object.create(Dummy.prototype)),  true);
  t.strictEqual(util.isObject(),                                false);
  t.strictEqual(util.isObject(null),                            false);
  t.strictEqual(util.isObject(undefined),                       false);
  t.strictEqual(util.isObject(false),                           false);
  t.strictEqual(util.isObject(true),                            false);
  t.strictEqual(util.isObject(0),                               false);
  t.strictEqual(util.isObject(42),                              false);
  t.strictEqual(util.isObject(''),                              false);
  t.strictEqual(util.isObject('foo'),                           false);
  t.strictEqual(util.isObject(function(){}),                    false);
  t.strictEqual(util.isObject(Symbol("foo")),                   false);
  t.end();
});

test("isPlainObject", function(t) {
  t.strictEqual(util.isPlainObject({}),                              true);
  t.strictEqual(util.isPlainObject([]),                              false);
  t.strictEqual(util.isPlainObject(new Date),                        false);
  t.strictEqual(util.isPlainObject(/regexp/),                        false);
  t.strictEqual(util.isPlainObject(new String('asd')),               false);
  t.strictEqual(util.isPlainObject(new Number(42)),                  false);
  t.strictEqual(util.isPlainObject(new Boolean(false)),              false);
  t.strictEqual(util.isPlainObject(new Map()),                       false);
  t.strictEqual(util.isPlainObject(new Set()),                       false);
  t.strictEqual(util.isPlainObject(new Dummy()),                     true);
  t.strictEqual(util.isPlainObject(Object.create(null)),             true);
  t.strictEqual(util.isPlainObject(Object.create(Array.prototype)),  true);
  t.strictEqual(util.isPlainObject(Object.create(RegExp.prototype)), true);
  t.strictEqual(util.isPlainObject(Object.create(Date.prototype)),   true);
  t.strictEqual(util.isPlainObject(Object.create(RegExp.prototype)), true);
  t.strictEqual(util.isPlainObject(Object.create(Dummy.prototype)),  true);
  t.strictEqual(util.isPlainObject(),                                false);
  t.strictEqual(util.isPlainObject(null),                            false);
  t.strictEqual(util.isPlainObject(undefined),                       false);
  t.strictEqual(util.isPlainObject(false),                           false);
  t.strictEqual(util.isPlainObject(true),                            false);
  t.strictEqual(util.isPlainObject(0),                               false);
  t.strictEqual(util.isPlainObject(42),                              false);
  t.strictEqual(util.isPlainObject(''),                              false);
  t.strictEqual(util.isPlainObject('foo'),                           false);
  t.strictEqual(util.isPlainObject(function(){}),                    false);
  t.strictEqual(util.isPlainObject(Symbol("foo")),                   false);
  t.end();
});

test("isPrimitive", function(t) {
  t.strictEqual(util.isPrimitive({}),                              false);
  t.strictEqual(util.isPrimitive([]),                              false);
  t.strictEqual(util.isPrimitive(new Date),                        false);
  t.strictEqual(util.isPrimitive(/regexp/),                        false);
  t.strictEqual(util.isPrimitive(new String('asd')),               false);
  t.strictEqual(util.isPrimitive(new Number(42)),                  false);
  t.strictEqual(util.isPrimitive(new Boolean(false)),              false);
  t.strictEqual(util.isPrimitive(new Dummy()),                     false);
  t.strictEqual(util.isPrimitive(Object.create(null)),             false);
  t.strictEqual(util.isPrimitive(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isPrimitive(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isPrimitive(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isPrimitive(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isPrimitive(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isPrimitive(),                                true);
  t.strictEqual(util.isPrimitive(null),                            true);
  t.strictEqual(util.isPrimitive(undefined),                       true);
  t.strictEqual(util.isPrimitive(false),                           true);
  t.strictEqual(util.isPrimitive(true),                            true);
  t.strictEqual(util.isPrimitive(0),                               true);
  t.strictEqual(util.isPrimitive(42),                              true);
  t.strictEqual(util.isPrimitive(''),                              true);
  t.strictEqual(util.isPrimitive('foo'),                           true);
  t.strictEqual(util.isPrimitive(function(){}),                    false);
  t.strictEqual(util.isPrimitive(Symbol("foo")),                   true);
  t.end();
});

test("isRegExp", function(t) {
  t.strictEqual(util.isRegExp(/regexp/),                        true);
  t.strictEqual(util.isRegExp(RegExp()),                        true);
  t.strictEqual(util.isRegExp(new RegExp()),                    true);
  t.strictEqual(util.isRegExp({}),                              false);
  t.strictEqual(util.isRegExp([]),                              false);
  t.strictEqual(util.isRegExp(new Date()),                      false);
  t.strictEqual(util.isRegExp(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isRegExp(function(){}),                    false);
  t.strictEqual(util.isRegExp(Symbol("foo")),                   false);
  t.end();
});

test("isSet", function(t) {
  t.strictEqual(util.isSet({}),                              false);
  t.strictEqual(util.isSet([]),                              false);
  t.strictEqual(util.isSet(new Date),                        false);
  t.strictEqual(util.isSet(/regexp/),                        false);
  t.strictEqual(util.isSet(new String('asd')),               false);
  t.strictEqual(util.isSet(new Number(42)),                  false);
  t.strictEqual(util.isSet(new Boolean(false)),              false);
  t.strictEqual(util.isSet(new Dummy()),                     false);
  t.strictEqual(util.isSet(new Map()),                       false);
  t.strictEqual(util.isSet(new Set()),                       true);
  t.strictEqual(util.isSet(Object.create(null)),             false);
  t.strictEqual(util.isSet(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isSet(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isSet(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isSet(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isSet(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isSet(),                                false);
  t.strictEqual(util.isSet(null),                            false);
  t.strictEqual(util.isSet(undefined),                       false);
  t.strictEqual(util.isSet(false),                           false);
  t.strictEqual(util.isSet(true),                            false);
  t.strictEqual(util.isSet(0),                               false);
  t.strictEqual(util.isSet(42),                              false);
  t.strictEqual(util.isSet(''),                              false);
  t.strictEqual(util.isSet('foo'),                           false);
  t.strictEqual(util.isSet(function(){}),                    false);
  t.strictEqual(util.isSet(Symbol("foo")),                   false);
  t.end();
});

test("isScalar", function(t) {
  t.strictEqual(util.isScalar, util.isPrimitive);
  t.end();
});

test("isString", function(t) {
  t.strictEqual(util.isString({}),                              false);
  t.strictEqual(util.isString([]),                              false);
  t.strictEqual(util.isString(new Date),                        false);
  t.strictEqual(util.isString(/regexp/),                        false);
  t.strictEqual(util.isString(new String('asd')),               false);
  t.strictEqual(util.isString(new Number(42)),                  false);
  t.strictEqual(util.isString(new Boolean(false)),              false);
  t.strictEqual(util.isString(new Dummy()),                     false);
  t.strictEqual(util.isString(Object.create(null)),             false);
  t.strictEqual(util.isString(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isString(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isString(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isString(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isString(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isString(),                                false);
  t.strictEqual(util.isString(null),                            false);
  t.strictEqual(util.isString(undefined),                       false);
  t.strictEqual(util.isString(false),                           false);
  t.strictEqual(util.isString(true),                            false);
  t.strictEqual(util.isString(0),                               false);
  t.strictEqual(util.isString(42),                              false);
  t.strictEqual(util.isString(''),                              true);
  t.strictEqual(util.isString('foo'),                           true);
  t.strictEqual(util.isString(function(){}),                    false);
  t.strictEqual(util.isString(Symbol("foo")),                   false);
  t.end();
});

test("isSymbol", function(t) {
  t.strictEqual(util.isSymbol({}),                              false);
  t.strictEqual(util.isSymbol([]),                              false);
  t.strictEqual(util.isSymbol(new Date),                        false);
  t.strictEqual(util.isSymbol(/regexp/),                        false);
  t.strictEqual(util.isSymbol(new String('asd')),               false);
  t.strictEqual(util.isSymbol(new Number(42)),                  false);
  t.strictEqual(util.isSymbol(new Boolean(false)),              false);
  t.strictEqual(util.isSymbol(new Dummy()),                     false);
  t.strictEqual(util.isSymbol(Object.create(null)),             false);
  t.strictEqual(util.isSymbol(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isSymbol(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isSymbol(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isSymbol(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isSymbol(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isSymbol(),                                false);
  t.strictEqual(util.isSymbol(null),                            false);
  t.strictEqual(util.isSymbol(undefined),                       false);
  t.strictEqual(util.isSymbol(false),                           false);
  t.strictEqual(util.isSymbol(true),                            false);
  t.strictEqual(util.isSymbol(0),                               false);
  t.strictEqual(util.isSymbol(42),                              false);
  t.strictEqual(util.isSymbol(''),                              false);
  t.strictEqual(util.isSymbol('foo'),                           false);
  t.strictEqual(util.isSymbol(function(){}),                    false);
  t.strictEqual(util.isSymbol(Symbol("foo")),                   true);
  t.end();
});

test("isTypedArray", function(t) {
  t.strictEqual(util.isTypedArray({}),                              false);
  t.strictEqual(util.isTypedArray([]),                              false);
  t.strictEqual(util.isTypedArray(new Date),                        false);
  t.strictEqual(util.isTypedArray(/regexp/),                        false);
  t.strictEqual(util.isTypedArray(new String('asd')),               false);
  t.strictEqual(util.isTypedArray(new Number(42)),                  false);
  t.strictEqual(util.isTypedArray(new Boolean(false)),              false);
  t.strictEqual(util.isTypedArray(new Dummy()),                     false);
  t.strictEqual(util.isTypedArray(Object.create(null)),             false);
  t.strictEqual(util.isTypedArray(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isTypedArray(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isTypedArray(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isTypedArray(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isTypedArray(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isTypedArray(),                                false);
  t.strictEqual(util.isTypedArray(null),                            false);
  t.strictEqual(util.isTypedArray(undefined),                       false);
  t.strictEqual(util.isTypedArray(void(0)),                         false);
  t.strictEqual(util.isTypedArray(false),                           false);
  t.strictEqual(util.isTypedArray(true),                            false);
  t.strictEqual(util.isTypedArray(0),                               false);
  t.strictEqual(util.isTypedArray(42),                              false);
  t.strictEqual(util.isTypedArray(''),                              false);
  t.strictEqual(util.isTypedArray('foo'),                           false);
  t.strictEqual(util.isTypedArray(function(){}),                    false);
  t.strictEqual(util.isTypedArray(Symbol("foo")),                   false);
  t.strictEqual(util.isTypedArray(new Int8Array(0)),                true);
  t.strictEqual(util.isTypedArray(new Uint8Array(0)),               true);
  t.strictEqual(util.isTypedArray(new Uint8ClampedArray(0)),        true);
  t.strictEqual(util.isTypedArray(new Int16Array(0)),               true);
  t.strictEqual(util.isTypedArray(new Uint16Array(0)),              true);
  t.strictEqual(util.isTypedArray(new Int32Array(0)),               true);
  t.strictEqual(util.isTypedArray(new Uint32Array(0)),              true);
  t.strictEqual(util.isTypedArray(new Float32Array(0)),             true);
  t.strictEqual(util.isTypedArray(new Float64Array(0)),             true);
  t.end();
});

test("isUndefined", function(t) {
  t.strictEqual(util.isUndefined({}),                              false);
  t.strictEqual(util.isUndefined([]),                              false);
  t.strictEqual(util.isUndefined(new Date),                        false);
  t.strictEqual(util.isUndefined(/regexp/),                        false);
  t.strictEqual(util.isUndefined(new String('asd')),               false);
  t.strictEqual(util.isUndefined(new Number(42)),                  false);
  t.strictEqual(util.isUndefined(new Boolean(false)),              false);
  t.strictEqual(util.isUndefined(new Dummy()),                     false);
  t.strictEqual(util.isUndefined(Object.create(null)),             false);
  t.strictEqual(util.isUndefined(Object.create(Array.prototype)),  false);
  t.strictEqual(util.isUndefined(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isUndefined(Object.create(Date.prototype)),   false);
  t.strictEqual(util.isUndefined(Object.create(RegExp.prototype)), false);
  t.strictEqual(util.isUndefined(Object.create(Dummy.prototype)),  false);
  t.strictEqual(util.isUndefined(),                                true);
  t.strictEqual(util.isUndefined(null),                            false);
  t.strictEqual(util.isUndefined(undefined),                       true);
  t.strictEqual(util.isUndefined(void(0)),                         true);
  t.strictEqual(util.isUndefined(false),                           false);
  t.strictEqual(util.isUndefined(true),                            false);
  t.strictEqual(util.isUndefined(0),                               false);
  t.strictEqual(util.isUndefined(42),                              false);
  t.strictEqual(util.isUndefined(''),                              false);
  t.strictEqual(util.isUndefined('foo'),                           false);
  t.strictEqual(util.isUndefined(function(){}),                    false);
  t.strictEqual(util.isUndefined(Symbol("foo")),                   false);
  t.end();
});
